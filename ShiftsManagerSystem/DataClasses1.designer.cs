#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShiftsManagerSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShiftsManagerDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertShift(Shift instance);
    partial void UpdateShift(Shift instance);
    partial void DeleteShift(Shift instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ShiftsManagerSystem.Properties.Settings.Default.ShiftsManagerDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Shift> Shifts
		{
			get
			{
				return this.GetTable<Shift>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _userName;
		
		private System.Nullable<decimal> _userRate;
		
		private bool _isClockedIn;
		
		private decimal _totalMinutes;
		
		private EntitySet<Shift> _Shifts;
		
		private EntitySet<Payment> _Payments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserRateChanging(System.Nullable<decimal> value);
    partial void OnuserRateChanged();
    partial void OnisClockedInChanging(bool value);
    partial void OnisClockedInChanged();
    partial void OntotalMinutesChanging(decimal value);
    partial void OntotalMinutesChanged();
    #endregion
		
		public User()
		{
			this._Shifts = new EntitySet<Shift>(new Action<Shift>(this.attach_Shifts), new Action<Shift>(this.detach_Shifts));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userRate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> userRate
		{
			get
			{
				return this._userRate;
			}
			set
			{
				if ((this._userRate != value))
				{
					this.OnuserRateChanging(value);
					this.SendPropertyChanging();
					this._userRate = value;
					this.SendPropertyChanged("userRate");
					this.OnuserRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isClockedIn", DbType="Bit NOT NULL")]
		public bool isClockedIn
		{
			get
			{
				return this._isClockedIn;
			}
			set
			{
				if ((this._isClockedIn != value))
				{
					this.OnisClockedInChanging(value);
					this.SendPropertyChanging();
					this._isClockedIn = value;
					this.SendPropertyChanged("isClockedIn");
					this.OnisClockedInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalMinutes", DbType="Decimal(18,0) NOT NULL")]
		public decimal totalMinutes
		{
			get
			{
				return this._totalMinutes;
			}
			set
			{
				if ((this._totalMinutes != value))
				{
					this.OntotalMinutesChanging(value);
					this.SendPropertyChanging();
					this._totalMinutes = value;
					this.SendPropertyChanged("totalMinutes");
					this.OntotalMinutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Shift", Storage="_Shifts", ThisKey="userID", OtherKey="userID")]
		public EntitySet<Shift> Shifts
		{
			get
			{
				return this._Shifts;
			}
			set
			{
				this._Shifts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Payment", Storage="_Payments", ThisKey="userID", OtherKey="userID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shifts(Shift entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Shifts(Shift entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shifts")]
	public partial class Shift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _shiftID;
		
		private System.DateTime _shiftClockIn;
		
		private System.Nullable<System.DateTime> _shiftClockOut;
		
		private int _userID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnshiftIDChanging(int value);
    partial void OnshiftIDChanged();
    partial void OnshiftClockInChanging(System.DateTime value);
    partial void OnshiftClockInChanged();
    partial void OnshiftClockOutChanging(System.Nullable<System.DateTime> value);
    partial void OnshiftClockOutChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    #endregion
		
		public Shift()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shiftID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int shiftID
		{
			get
			{
				return this._shiftID;
			}
			set
			{
				if ((this._shiftID != value))
				{
					this.OnshiftIDChanging(value);
					this.SendPropertyChanging();
					this._shiftID = value;
					this.SendPropertyChanged("shiftID");
					this.OnshiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shiftClockIn", DbType="DateTime NOT NULL")]
		public System.DateTime shiftClockIn
		{
			get
			{
				return this._shiftClockIn;
			}
			set
			{
				if ((this._shiftClockIn != value))
				{
					this.OnshiftClockInChanging(value);
					this.SendPropertyChanging();
					this._shiftClockIn = value;
					this.SendPropertyChanged("shiftClockIn");
					this.OnshiftClockInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shiftClockOut", DbType="DateTime")]
		public System.Nullable<System.DateTime> shiftClockOut
		{
			get
			{
				return this._shiftClockOut;
			}
			set
			{
				if ((this._shiftClockOut != value))
				{
					this.OnshiftClockOutChanging(value);
					this.SendPropertyChanging();
					this._shiftClockOut = value;
					this.SendPropertyChanged("shiftClockOut");
					this.OnshiftClockOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Shift", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Shifts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Shifts.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payments")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _paymentId;
		
		private System.Nullable<decimal> _paymentAmount;
		
		private System.DateTime _paymentDate;
		
		private int _userID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpaymentIdChanging(int value);
    partial void OnpaymentIdChanged();
    partial void OnpaymentAmountChanging(System.Nullable<decimal> value);
    partial void OnpaymentAmountChanged();
    partial void OnpaymentDateChanging(System.DateTime value);
    partial void OnpaymentDateChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    #endregion
		
		public Payment()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int paymentId
		{
			get
			{
				return this._paymentId;
			}
			set
			{
				if ((this._paymentId != value))
				{
					this.OnpaymentIdChanging(value);
					this.SendPropertyChanging();
					this._paymentId = value;
					this.SendPropertyChanged("paymentId");
					this.OnpaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> paymentAmount
		{
			get
			{
				return this._paymentAmount;
			}
			set
			{
				if ((this._paymentAmount != value))
				{
					this.OnpaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._paymentAmount = value;
					this.SendPropertyChanged("paymentAmount");
					this.OnpaymentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentDate", DbType="DateTime NOT NULL")]
		public System.DateTime paymentDate
		{
			get
			{
				return this._paymentDate;
			}
			set
			{
				if ((this._paymentDate != value))
				{
					this.OnpaymentDateChanging(value);
					this.SendPropertyChanging();
					this._paymentDate = value;
					this.SendPropertyChanged("paymentDate");
					this.OnpaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Payment", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
